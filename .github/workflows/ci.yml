name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"

  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"

  workflow_dispatch:

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  test:
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        rf-versions: ["5.0.1", "7.0.1"]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Install robotframework version
        run: poetry run pip install robotframework==${{ matrix.rf-versions }}

      - name: initialize robotframework.Browser
        run: poetry run rfbrowser init

      - name: Unit tests
        run: poetry run pytest "--junitxml=test-results/python-${{ matrix.python-version }}/test-results.xml" "--html=test-results/python-${{ matrix.python-version }}/report.html" --self-contained-html

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results

  publish-test-results:
    needs: test
    runs-on: ubuntu-latest

    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          junit_files: ./**/test-results.xml

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: setup python environment
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - run: poetry run isort --check --diff .
        if: always()

      - run: poetry run black --check --diff .
        if: always()

      - run: poetry run flake8 .
        if: always()

      - run: poetry run mypy .
        if: always()

  release:
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Python Semantic Release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"

          poetry run semantic-release publish -D commit_author="github-actions <action@github.com>"
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
          PYPI_TOKEN: ${{secrets.PYPI_TOKEN}}
